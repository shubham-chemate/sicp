> (define (sqrt-iter g x)
    (if (good-enough? g x)
        g
        (sqrt-iter (improve g x) x)))
> (define (improve g x)
    (average g (/ x g)))
> (define (average x y)
    (/ (+ x y) 2))
> (define (good-enough? g x)
    (< (abs (- (square g) x)) 0.001))
> (define (sqrt x)
    (sqrt-iter 1.0 x))
> (sqrt 0)
.03125
> (sqrt 9)
3.00009155413138
> (sqrt 0.000000000000000000009)
.03125
> (sqrt 9000000000000000000000000000000)
3e15
> (sqrt 9000000000000000000000000000000000000000000000000000000000000)
*** INTERRUPTED IN sqrt-iter, console@4:20
1> (sqrt 90000000000000000000000000000000)
9.486832980505138e15
1> 
(sqrt 90000000000000000000000000000000)
9.486832980505138e15
1> (sqrt 90000000000000000000000000000000)
9.486832980505138e15
1> (sqrt 9000000000000000000000000000000)
3e15
1> (sqrt 900000000000000000000000000000000)
3e16
1> (sqrt 90000000000000000000000000000000000)
3e17
1> (sqrt 9000000000000000000000000000000000000)
3e18
1> (sqrt 900000000000000000000000000000000000000)
3e19
1> (sqrt 90000000000000000000000000000000000000000)
3e20
1> (sqrt 9000000000000000000000000000000000000000000)
3e21
1> (sqrt 900000000000000000000000000000000000000000000)
3e22
1> (sqrt 90000000000000000000000000000000000000000000000)
3e23
1> (sqrt 9000000000000000000000000000000000000000000000000)
3e24
1> (sqrt 900000000000000000000000000000000000000000000000000)
3e25
1> (sqrt 90000000000000000000000000000000000000000000000000000)
3e26
1> (sqrt 9000000000000000000000000000000000000000000000000000000)
*** INTERRUPTED IN sqrt-iter, console@4:20
2> (sqrt 90000000000000000000000000000000000000000000000000000)