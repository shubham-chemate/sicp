(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

(define (make-rat n d) (cons n d))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-half (make-rat 1 2))
(define one-third (make-rat 1 3))

(define (make-rat n d)
  (let ((g (gcd n d)))
  (cons (/ n g)
        (/ d g))))

(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (cond (> (* n d) 0) 
           cons (/ (abs n) (abs g))
           (/ (abs n) (abs g)))))

(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
  (cond ((> (* n d) 0) 
         (cons (/ (abs n) g)
               (/ (abs d) g)))
        (else (cons (/ (- 0 n) g)
                    (/ (abs d) g))))))